-- 
-- TS_INVALID_CONTENTTYPEID --
-- 
CREATE OR REPLACE FORCE VIEW TS_INVALID_CONTENTTYPEID AS
	-- Finds all items in the CONTENTSTATUS table, that have an invalid CONTENTTYPEID.
	-- Results are filtered by community.
	SELECT * FROM CONTENTSTATUS
	WHERE CONTENTTYPEID NOT IN(
		SELECT CONTENTTYPEID FROM CONTENTTYPES
	);
/
-- 
-- TS_INVALID_WORKFLOWAPPID --
-- 
CREATE OR REPLACE FORCE VIEW TS_INVALID_WORKFLOWAPPID AS
	-- Finds all items in the CONTENTSTATUS table, that have an invalid WORKFLOWAPPID.
	-- Results are filtered by community.
	SELECT *
	FROM CONTENTSTATUS
	WHERE WORKFLOWAPPID NOT IN(
			SELECT WORKFLOWAPPID FROM WORKFLOWAPPS
		)
		AND WORKFLOWAPPID <> '-1';
/
--
-- TS_MULTIPLE_PARENT_NAVONS --
--
CREATE OR REPLACE FORCE VIEW TS_MULTIPLE_PARENT_NAVONS AS 
	-- Finds all publishable navons with more than one parent navon.
	-- Results are filtered by community.
	SELECT 
		-- COUNT NUMBER OF PARENT NAVON RELATIONSHIPS
		COUNT(REL1.OWNER_ID) AS COUNT_OWNER_ID,
		REL1.DEPENDENT_ID AS DEPENDENT_ID,
		CS.COMMUNITYID
	FROM 
		PSX_OBJECTRELATIONSHIP REL1,
		CONTENTSTATUS CS
	WHERE 
		-- JOIN OWNER_REVISION WITH PUBLIC_REVISION
		REL1.OWNER_REVISION = CS.PUBLIC_REVISION
		-- JOIN OWNER_ID WITH CONTENTID
		AND REL1.OWNER_ID = CS.CONTENTID
		-- FILTER ON NAV SUBMENU SLOT
		AND REL1.SLOT_ID = (
			-- FIND NAV SUBMENU SLOTID
			SELECT SLOTID 
			FROM RXSLOTTYPE 
			WHERE SLOTNAME LIKE '%submenu'
		)
		-- FILTER ON CHILD NAVONS
		AND REL1.DEPENDENT_ID IN (
			-- FIND CONTENTID OF ALL NAVON ITEMS IN CONTENTSTATUS
			SELECT CONTENTID
			FROM CONTENTSTATUS
			WHERE CONTENTTYPEID = (
				-- FIND NAVON CONTENTYPEID
				SELECT CONTENTTYPEID 
				FROM CONTENTTYPES 
				WHERE CONTENTTYPELABEL = 'Navon'
			)
		)
	-- GROUP BY CHILD NAVONS
	GROUP BY REL1.DEPENDENT_ID,CS.COMMUNITYID
	-- FILTER ON COUNT > 1
	HAVING COUNT(REL1.OWNER_ID) > 1
	-- ORDER BY CHILD NAVON CONTENTID
	ORDER BY DEPENDENT_ID,CS.COMMUNITYID;
/
--
-- TS_NON_PUB_LANDING_PAGE --
--
CREATE OR REPLACE FORCE VIEW TS_NON_PUB_LANDING_PAGE AS 
	-- Finds all non-publishable landing pages of publishable navons.
	-- Results are filtered by community.
	SELECT 
		CS2.*
	FROM 
		PSX_OBJECTRELATIONSHIP REL,
		CONTENTSTATUS CS1,
		CONTENTSTATUS CS2,
		STATES ST1,
		STATES ST2
	WHERE 
		-- PARENT ITEM IS A NAVON
		REL.OWNER_ID = CS1.CONTENTID
		AND REL.OWNER_REVISION = CS1.PUBLIC_REVISION
		AND CS1.CONTENTTYPEID = (
			SELECT CONTENTTYPEID 
			FROM CONTENTTYPES 
			WHERE CONTENTTYPELABEL = 'Navon'
		)
		-- CHILD ITEM IS IN NAV LANDING PAGE SLOT
		AND REL.SLOT_ID = (
			SELECT SLOTID
			FROM RXSLOTTYPE 
			WHERE SLOTNAME = 'rffNavLandingPage'
		)
		AND REL.DEPENDENT_ID = CS2.CONTENTID
		-- PARENT NAVON IS PUBLISHABLE
		AND CS1.CONTENTSTATEID = ST1.STATEID
		AND CS1.WORKFLOWAPPID = ST1.WORKFLOWAPPID
		AND ST1.CONTENTVALID IN ('y','i')
		-- CHILD LANDING PAGE ITEM IS NOT PUBLISHABLE
		AND CS2.CONTENTSTATEID = ST2.STATEID
		AND CS2.WORKFLOWAPPID = ST2.WORKFLOWAPPID
		AND ST2.CONTENTVALID NOT IN ('y','i')
	ORDER BY REL.DEPENDENT_ID;
/
--  
-- TS_ORPHANED_DEP_ITEMS
-- 
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_ITEMS AS 
	-- Finds all items that are not in a folder and have AA relationship(s) to other items.
	-- Results are filtered by community.
	SELECT CS.*
	FROM CONTENTSTATUS CS
	WHERE 
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE=1
		AND CS.CONTENTID NOT IN 
		(
			-- Finds all items that have a folder relationship
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		AND CS.CONTENTID IN 
		(
			-- Finds all items that have an AA relationship to other items
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=1
				AND CS2.PUBLIC_REVISION=OB.OWNER_REVISION
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1;
/

	--
	-- ### REPORTS "TS_ORPHANED_DEP_ITEMS" ### --
	--

		--
		-- TS_ORPHANED_DEP_ITEMS_COM --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Community
			SELECT 
				COUNT(ODI.CONTENTID) COUNT, 
				ODI.COMMUNITYID,
				COM.NAME
			FROM 
				TS_ORPHANED_DEP_ITEMS ODI,
				RXCOMMUNITY COM
			WHERE
				ODI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY ODI.COMMUNITYID,COM.NAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_COM.csv
		/
		--
		-- TS_ORPHANED_DEP_ITEMS_CT --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_ITEMS_CT AS 
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Content Type
			SELECT 
				COUNT(ODI.CONTENTID) COUNT, 
				ODI.CONTENTTYPEID,
				CT.CONTENTTYPENAME
			FROM 
				TS_ORPHANED_DEP_ITEMS ODI,
				CONTENTTYPES CT
			WHERE
				ODI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY ODI.CONTENTTYPEID,CT.CONTENTTYPENAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_CT.csv
		/
		--
		-- TS_ORPHANED_DEP_ITEMS_WF --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Workflow
			SELECT 
				COUNT(ODI.CONTENTID) COUNT, 
				ODI.WORKFLOWAPPID,
				WF.WORKFLOWAPPNAME
			FROM 
				TS_ORPHANED_DEP_ITEMS ODI,
				WORKFLOWAPPS WF
			WHERE
				ODI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY ODI.WORKFLOWAPPID,WF.WORKFLOWAPPNAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_WF.csv
		/
--
-- TS_ORPHANED_DEP_NAVONS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_NAVONS AS 
	-- Finds all Navons that are not in a folder and have AA relationship(s) to other items.
	-- Results are filtered by community.
	SELECT *
	FROM TS_ORPHANED_DEP_ITEMS ODI
	WHERE ODI.CONTENTTYPEID=(SELECT CONTENTTYPEID FROM CONTENTTYPES WHERE CONTENTTYPELABEL LIKE 'Navon');
	-- Please save above results into a CSV file named: TS_ORPHANED_DEP_NAVONS.csv
/
--
-- TS_ORPHANED_DEP_PUB_ITEMS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_PUB_ITEMS AS 
	-- Finds all items that are not in a folder, have AA relationship(s) to other items, and are in a publishable state.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
	  CONTENTSTATUS CS,
	  STATES ST
	WHERE 
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE=1
		AND CS.CONTENTID NOT IN 
		(
			-- Finds all items that have a folder relationship
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		AND CS.CONTENTID IN 
		(
			-- Finds all items that have an AA relationship to other items
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=1
				AND CS2.PUBLIC_REVISION=OB.OWNER_REVISION
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1
		AND CS.CONTENTSTATEID = ST.STATEID
		AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
		AND ST.CONTENTVALID IN ('y','i');
		-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS.csv
/

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_COM --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_PUB_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Community
			SELECT 
				COUNT(ODPI.CONTENTID) COUNT, 
				ODPI.COMMUNITYID,
				COM.NAME
			FROM 
				TS_ORPHANED_DEP_PUB_ITEMS ODPI,
				RXCOMMUNITY COM
			WHERE
				ODPI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY ODPI.COMMUNITYID,COM.NAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_COM.csv
		/
		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_CT --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_PUB_ITEMS_CT AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Content Type
			SELECT 
				COUNT(ODPI.CONTENTID) COUNT, 
				ODPI.CONTENTTYPEID,
				CT.CONTENTTYPENAME
			FROM 
				TS_ORPHANED_DEP_PUB_ITEMS ODPI,
				CONTENTTYPES CT
			WHERE
				ODPI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY ODPI.CONTENTTYPEID,CT.CONTENTTYPENAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_CT.csv
		/
		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_WF --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_DEP_PUB_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Workflow
			SELECT 
				COUNT(ODPI.CONTENTID) COUNT, 
				ODPI.WORKFLOWAPPID,
				WF.WORKFLOWAPPNAME
			FROM 
				TS_ORPHANED_DEP_PUB_ITEMS ODPI,
				WORKFLOWAPPS WF
			WHERE
				ODPI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY ODPI.WORKFLOWAPPID,WF.WORKFLOWAPPNAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_WF.csv
		/
--
-- TS_ORPHANED_FOLDERS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_FOLDERS AS 
	-- Finds all folders that are not in a folder.
	-- Results are filtered by community.
	SELECT CS.*
	FROM CONTENTSTATUS CS
	WHERE 
		-- OBJECTTYPE=2 is a folder
		CS.OBJECTTYPE=2
		AND CS.CONTENTID NOT IN 
		(
			-- Finds all folders that have a folder relationship
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=2
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1;
		-- Please save above results into a CSV file named: TS_ORPHANED_FOLDERS.csv
/
--
-- TS_ORPHANED_ITEMS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_ITEMS AS 
	-- Finds all items that are not in a folder. 
	-- Results are filtered by community.
	SELECT CS.*
	FROM CONTENTSTATUS CS
	WHERE 
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE=1
		AND CS.CONTENTID NOT IN 
		(
			-- Finds all items that have a folder relationship
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1;
		-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS.csv
/

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_ITEMS_COM --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_ITEMS_COM AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Community
			SELECT 
				COUNT(OI.CONTENTID) COUNT, 
				OI.COMMUNITYID,
				COM.NAME
			FROM 
				TS_ORPHANED_ITEMS OI,
				RXCOMMUNITY COM
			WHERE
				OI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY OI.COMMUNITYID,COM.NAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_COM.csv
		/
		--
		-- TS_ORPHANED_ITEMS_CT --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_ITEMS_CT AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Content Type
			SELECT 
				COUNT(OI.CONTENTID) COUNT, 
				OI.CONTENTTYPEID,
				CT.CONTENTTYPENAME
			FROM 
				TS_ORPHANED_ITEMS OI,
				CONTENTTYPES CT
			WHERE
				OI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY OI.CONTENTTYPEID,CT.CONTENTTYPENAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_CT.csv
		/
		--
		-- TS_ORPHANED_ITEMS_WF --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_ITEMS_WF AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Workflow
			SELECT 
				COUNT(OI.CONTENTID) COUNT, 
				OI.WORKFLOWAPPID,
				WF.WORKFLOWAPPNAME
			FROM 
				TS_ORPHANED_ITEMS OI,
				WORKFLOWAPPS WF
			WHERE
				OI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY OI.WORKFLOWAPPID,WF.WORKFLOWAPPNAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_WF.csv
		/
--
-- TS_ORPHANED_NAVONS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_NAVONS AS 
	-- Finds all Navons that are not in a folder. 
	-- Results are filtered by community.
	SELECT *
	FROM TS_ORPHANED_ITEMS OI
	WHERE OI.CONTENTTYPEID=(SELECT CONTENTTYPEID FROM CONTENTTYPES WHERE CONTENTTYPELABEL LIKE 'Navon');
	-- Please save above results into a CSV file named: TS_ORPHANED_NAVONS.csv
/
--
-- TS_ORPHANED_PUB_ITEMS
--
CREATE OR REPLACE FORCE VIEW TS_ORPHANED_PUB_ITEMS AS 
	-- Finds all items that are not in a folder and are in a publishable state.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
	  CONTENTSTATUS CS,
	  STATES ST
	WHERE 
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE=1
		AND CS.CONTENTID NOT IN 
		(
			-- Finds all items that have a folder relationship
			SELECT DISTINCT(OB.DEPENDENT_ID)
			FROM 
				CONTENTSTATUS CS1,
				CONTENTSTATUS CS2,
				PSX_OBJECTRELATIONSHIP OB	
			WHERE 
				CS1.CONTENTID = OB.DEPENDENT_ID
				AND CS1.OBJECTTYPE=1
				AND OB.OWNER_ID = CS2.CONTENTID
				AND CS2.OBJECTTYPE=2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1
		AND CS.CONTENTSTATEID = ST.STATEID
		AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
		AND ST.CONTENTVALID IN ('y','i');
		-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS.csv
/

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_PUB_ITEMS_COM --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_PUB_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Community
			SELECT 
				COUNT(OPI.CONTENTID) COUNT, 
				OPI.COMMUNITYID,
				COM.NAME
			FROM 
				TS_ORPHANED_PUB_ITEMS OPI,
				RXCOMMUNITY COM
			WHERE
				OPI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY OPI.COMMUNITYID,COM.NAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_COM.csv
		/
		--
		-- TS_ORPHANED_PUB_ITEMS_CT --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_PUB_ITEMS_CT AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Content Type
			SELECT 
				COUNT(OPI.CONTENTID) COUNT, 
				OPI.CONTENTTYPEID,
				CT.CONTENTTYPENAME
			FROM 
				TS_ORPHANED_PUB_ITEMS OPI,
				CONTENTTYPES CT
			WHERE
				OPI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY OPI.CONTENTTYPEID,CT.CONTENTTYPENAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_CT.csv
		/
		--
		-- TS_ORPHANED_PUB_ITEMS_WF --
		--
		CREATE OR REPLACE FORCE VIEW TS_ORPHANED_PUB_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Workflow
			SELECT 
				COUNT(OPI.CONTENTID) COUNT, 
				OPI.WORKFLOWAPPID,
				WF.WORKFLOWAPPNAME
			FROM 
				TS_ORPHANED_PUB_ITEMS OPI,
				WORKFLOWAPPS WF
			WHERE
				OPI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY OPI.WORKFLOWAPPID,WF.WORKFLOWAPPNAME
			ORDER BY COUNT;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_WF.csv
		/
--
-- TS_PUB_NAVONS_NO_LANDING_PAGE --
--
CREATE OR REPLACE FORCE VIEW TS_PUB_NAVONS_NO_LANDING_PAGE AS 
	-- Finds all publishable navons without a landing page.
	-- Results are filtered by community.
	SELECT 
		CS.*
	FROM 
		CONTENTSTATUS CS,
		STATES ST
	WHERE 
		-- PARENT ITEM IS A NAVON
		CS.CONTENTTYPEID = (
			SELECT CONTENTTYPEID 
			FROM CONTENTTYPES 
			WHERE CONTENTTYPELABEL = 'Navon'
		)
		-- PARENT NAVON IS PUBLISHABLE
		AND CS.CONTENTSTATEID = ST.STATEID
		AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
		AND ST.CONTENTVALID IN ('y','i')
		AND CS.CONTENTID NOT IN (
			-- Finds all PUBLISHABLE NAVONS WITH A LANDING PAGE
			SELECT 
				REL.OWNER_ID AS OWNER_ID
			FROM 
				PSX_OBJECTRELATIONSHIP REL,
				CONTENTSTATUS CS1,
				STATES ST1
			WHERE 
				-- PARENT ITEM IS A NAVON
				REL.OWNER_ID = CS1.CONTENTID
				AND REL.OWNER_REVISION = CS1.PUBLIC_REVISION
				AND CS1.CONTENTTYPEID = (
					SELECT CONTENTTYPEID 
					FROM CONTENTTYPES 
					WHERE CONTENTTYPELABEL = 'Navon'
				)
				-- NAVON HAS NAV LANDING PAGE ITEM
				AND REL.SLOT_ID = (
					SELECT SLOTID
					FROM RXSLOTTYPE 
					WHERE SLOTNAME = 'rffNavLandingPage'
				)
				-- PARENT NAVON IS PUBLISHABLE
				AND CS1.CONTENTSTATEID = ST1.STATEID
				AND CS1.WORKFLOWAPPID = ST1.WORKFLOWAPPID
				AND ST1.CONTENTVALID IN ('y','i')
		)	
	ORDER BY CS.CONTENTID;
/
--
-- TS_RXPUBDOCS_NO_FILENAME --
--
CREATE OR REPLACE FORCE VIEW TS_RXPUBDOCS_NO_FILENAME AS
	SELECT 
		PD.PUBSTATUSID,
		PD.CONTENTID,
		PD.VARIANTID,
		PD.LOCATIONHASH,
		PD.PUBSTATUS,
		PD.PUBDATE,
		PD.PUBOP,
		PD.PUBLOCATION,
		PD.CONTENTURL,
		PD.VERSIONID,
		PD.REVISIONID,
		PD.ELAPSETIME,
		CS.CONTENTTYPEID,
		CS.COMMUNITYID
	FROM 
		RXPUBDOCS PD,
		CONTENTSTATUS CS
	WHERE 
		PD.CONTENTID = CS.CONTENTID
		-- Finds all published content items that end in a '/' 
		-- (e.g. don't have a filename or file extension) for their publocation.
		-- Results are filtered by community.
		AND SUBSTR(PD.PUBLOCATION,-1,1) = '/' 
	ORDER BY PD.PUBDATE,PD.CONTENTID;
/
--
-- TS_RXPUBDOCS_NO_FILENAME_ORPH --
--
CREATE OR REPLACE FORCE VIEW TS_RXPUBDOCS_NO_FILENAME_ORPH AS
	SELECT 
		PD.PUBSTATUSID,
		PD.CONTENTID,
		PD.VARIANTID,
		PD.LOCATIONHASH,
		PD.PUBSTATUS,
		PD.PUBDATE,
		PD.PUBOP,
		PD.PUBLOCATION,
		PD.CONTENTURL,
		PD.VERSIONID,
		PD.REVISIONID,
		PD.ELAPSETIME,
		CS.CONTENTTYPEID,
		CS.COMMUNITYID
	FROM 
		RXPUBDOCS PD,
		CONTENTSTATUS CS
	WHERE 
		PD.CONTENTID = CS.CONTENTID
		-- Finds all published content items that end in a '/' 
		-- (e.g. don't have a filename or file extension) for their publocation
		AND SUBSTR(PD.PUBLOCATION,-1,1) = '/' 
		-- and are also in the TS_ORPHANED_ITEMS view result set.
		-- Results are filtered by community.
		AND PD.CONTENTID IN (
			SELECT CONTENTID
			FROM TS_ORPHANED_ITEMS
		)
	ORDER BY PD.PUBDATE,PD.CONTENTID;
/
--
-- TS_SHAREDBINARY_NO_FILENAME --
--
CREATE OR REPLACE FORCE VIEW TS_SHAREDBINARY_NO_FILENAME AS
	-- Finds all items in the RXS_CT_SHAREDBINARY table, 
	-- that have a null ITEM_FILENAME, 
	-- but ITEM is not null for the item's current public revision.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
		CONTENTSTATUS CS, 
		RXS_CT_SHAREDBINARY SB
	WHERE 
		CS.CONTENTID = SB.CONTENTID
		AND CS.PUBLIC_REVISION = SB.REVISIONID
		AND SB.ITEM_FILENAME IS NULL
		AND SB.ITEM IS NOT NULL;
/
--
-- TS_SHAREDIMAGE_NO_FILENAME --
--
CREATE OR REPLACE FORCE VIEW TS_SHAREDIMAGE_NO_FILENAME AS
	-- Finds all items in the RXS_CT_SHAREDIMAGE table, 
	-- that have a null IMG1_FILENAME, 
	-- but IMG1 is not null for the item's current public revision.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
		CONTENTSTATUS CS, 
		RXS_CT_SHAREDIMAGE SI
	WHERE 
		CS.CONTENTID = SI.CONTENTID
		AND CS.PUBLIC_REVISION = SI.REVISIONID
		AND SI.IMG1_FILENAME IS NULL
		AND SI.IMG1 IS NOT NULL;
/
COMMIT;