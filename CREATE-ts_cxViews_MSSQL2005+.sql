-- 
-- TS_INVALID_CONTENTTYPEID --
-- 
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_INVALID_CONTENTTYPEID'))
DROP VIEW TS_INVALID_CONTENTTYPEID
GO
CREATE VIEW TS_INVALID_CONTENTTYPEID AS
	-- Finds all items in the CONTENTSTATUS table, that have an invalid CONTENTTYPEID.
	-- Results are filtered by community.
	SELECT * 
	FROM CONTENTSTATUS
	WHERE 
		CONTENTTYPEID NOT IN(
			SELECT CONTENTTYPEID FROM CONTENTTYPES
		);
GO
-- 
-- TS_INVALID_WORKFLOWAPPID --
-- 
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_INVALID_WORKFLOWAPPID'))
DROP VIEW TS_INVALID_WORKFLOWAPPID
GO
CREATE VIEW TS_INVALID_WORKFLOWAPPID AS
	-- Finds all items in the CONTENTSTATUS table, that have an invalid WORKFLOWAPPID.
	-- Results are filtered by community.
	SELECT *
	FROM CONTENTSTATUS
	WHERE 
		WORKFLOWAPPID NOT IN(
			SELECT WORKFLOWAPPID FROM WORKFLOWAPPS
		)
		AND WORKFLOWAPPID <> '-1';
GO
--
-- TS_MULTIPLE_PARENT_NAVONS --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_MULTIPLE_PARENT_NAVONS'))
DROP VIEW TS_MULTIPLE_PARENT_NAVONS
GO
CREATE VIEW TS_MULTIPLE_PARENT_NAVONS AS 
	-- Finds all publishable navons with more than one parent navon.
	-- Results are filtered by community.
	SELECT     
		-- COUNT NUMBER OF PARENT NAVON RELATIONSHIPS
		COUNT(REL1.OWNER_ID) AS COUNT_OWNER_ID, 
		REL1.DEPENDENT_ID, 
		CS.COMMUNITYID
	FROM
		PSX_OBJECTRELATIONSHIP AS REL1 
		INNER JOIN
			-- JOIN OWNER_REVISION WITH PUBLIC_REVISION
			CONTENTSTATUS AS CS 
		ON 
			REL1.OWNER_REVISION = CS.PUBLIC_REVISION 
			-- JOIN OWNER_ID WITH CONTENTID
			AND REL1.OWNER_ID = CS.CONTENTID
	WHERE
			-- FILTER ON NAV SUBMENU SLOT
			REL1.SLOT_ID = (
				SELECT SLOTID
				FROM RXSLOTTYPE
				WHERE (SLOTNAME LIKE '%submenu')
			)
			-- FILTER ON CHILD NAVONS
			AND REL1.DEPENDENT_ID IN (
				-- FIND CONTENTID OF ALL NAVON ITEMS IN CONTENTSTATUS
				SELECT CONTENTID
				FROM CONTENTSTATUS
				WHERE CONTENTTYPEID = (
					-- FIND NAVON CONTENTYPEID
					SELECT CONTENTTYPEID
					FROM CONTENTTYPES
					WHERE (CONTENTTYPELABEL = 'Navon'))
				)
	-- GROUP BY CHILD NAVONS
	GROUP BY 
		REL1.DEPENDENT_ID, 
		CS.COMMUNITYID
	-- FILTER ON COUNT > 1
	HAVING (COUNT(REL1.OWNER_ID) > 1);
GO
--
-- TS_NON_PUB_LANDING_PAGE --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_NON_PUB_LANDING_PAGE'))
DROP VIEW TS_NON_PUB_LANDING_PAGE
GO
CREATE VIEW TS_NON_PUB_LANDING_PAGE AS 
	-- Finds all non-publishable landing pages of publishable navons.
	-- Results are filtered by community.
	SELECT CS2.*
	FROM 
		PSX_OBJECTRELATIONSHIP AS REL 
		INNER JOIN
			CONTENTSTATUS AS CS1 
		ON 
			REL.OWNER_ID = CS1.CONTENTID 
			AND REL.OWNER_REVISION = CS1.PUBLIC_REVISION 
		INNER JOIN
			CONTENTSTATUS AS CS2 
		ON 
			REL.DEPENDENT_ID = CS2.CONTENTID 
		INNER JOIN
			STATES AS ST1 
		ON 
			CS1.CONTENTSTATEID = ST1.STATEID 
			AND CS1.WORKFLOWAPPID = ST1.WORKFLOWAPPID 
		INNER JOIN
			STATES AS ST2 
		ON 
			CS2.CONTENTSTATEID = ST2.STATEID 
			AND CS2.WORKFLOWAPPID = ST2.WORKFLOWAPPID
	WHERE     
		-- PARENT ITEM IS A NAVON
		CS1.CONTENTTYPEID = (
			SELECT CONTENTTYPEID
			FROM CONTENTTYPES
			WHERE CONTENTTYPELABEL = 'Navon'
		)
		-- CHILD ITEM IS IN NAV LANDING PAGE SLOT
		AND REL.SLOT_ID = (
			SELECT SLOTID
			FROM RXSLOTTYPE 
			WHERE SLOTNAME = 'rffNavLandingPage'
		)
		-- PARENT NAVON IS PUBLISHABLE
		AND ST1.CONTENTVALID IN ('y', 'i')
		-- CHILD LANDING PAGE ITEM IS NOT PUBLISHABLE
		AND ST2.CONTENTVALID NOT IN ('y', 'i');
GO
--  
-- TS_ORPHANED_DEP_ITEMS
-- 
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_ITEMS'))
DROP VIEW TS_ORPHANED_DEP_ITEMS
GO
CREATE VIEW TS_ORPHANED_DEP_ITEMS AS 
	-- Finds all items that are not in a folder and have AA relationship(s) to other items.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
		CONTENTSTATUS AS CS
	WHERE     
		-- OBJECTTYPE=1 is an item
		OBJECTTYPE = 1
		AND CONTENTID NOT IN (
			-- Finds all items that have a folder relationship
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM 
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON 
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON 
					OB.OWNER_ID = CS2.CONTENTID
			WHERE 
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
		)
		AND CONTENTID IN (
			-- Finds all items that have an AA relationship to other items
			SELECT 
				DISTINCT OB.DEPENDENT_ID
            FROM
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON 
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON 
					OB.OWNER_ID = CS2.CONTENTID 
					AND OB.OWNER_REVISION = CS2.PUBLIC_REVISION
			WHERE
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 1
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			)
		-- Exclude the '/' root folder which is always contentid=1
		AND CONTENTID <> 1;
GO

	--
	-- ### REPORTS "TS_ORPHANED_DEP_ITEMS" ### --
	--

		--
		-- TS_ORPHANED_DEP_ITEMS_COM --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_ITEMS_COM'))
		DROP VIEW TS_ORPHANED_DEP_ITEMS_COM
		GO
		CREATE VIEW TS_ORPHANED_DEP_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Community
			SELECT
				COUNT(ODI.CONTENTID) AS COUNT, 
				ODI.COMMUNITYID, 
				COM.NAME
			FROM
				TS_ORPHANED_DEP_ITEMS AS ODI 
				INNER JOIN
					RXCOMMUNITY AS COM 
				ON 
					ODI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY 
				ODI.COMMUNITYID, 
				COM.NAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_COM.csv
		GO
		--
		-- TS_ORPHANED_DEP_ITEMS_CT --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_ITEMS_CT'))
		DROP VIEW TS_ORPHANED_DEP_ITEMS_CT
		GO
		CREATE VIEW TS_ORPHANED_DEP_ITEMS_CT AS 
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Content Type
			SELECT
				COUNT(ODI.CONTENTID) AS COUNT, 
				ODI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME
			FROM
				TS_ORPHANED_DEP_ITEMS AS ODI 
				INNER JOIN
					CONTENTTYPES AS CT 
				ON 
					ODI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY 
				ODI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_CT.csv
		GO
		--
		-- TS_ORPHANED_DEP_ITEMS_WF --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_ITEMS_WF'))
		DROP VIEW TS_ORPHANED_DEP_ITEMS_WF
		GO
		CREATE VIEW TS_ORPHANED_DEP_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Dependent Items Grouped by Workflow
			SELECT 
				COUNT(ODI.CONTENTID) AS COUNT, 
				ODI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME
			FROM 
				TS_ORPHANED_DEP_ITEMS AS ODI 
				INNER JOIN
					WORKFLOWAPPS AS WF 
				ON 
					ODI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY 
				ODI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_ITEMS_WF.csv
		GO
--
-- TS_ORPHANED_DEP_NAVONS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_NAVONS'))
DROP VIEW TS_ORPHANED_DEP_NAVONS
GO
CREATE VIEW TS_ORPHANED_DEP_NAVONS AS 
	-- Finds all Navons that are not in a folder and have AA relationship(s) to other items.
	-- Results are filtered by community.
	SELECT *
	FROM 
		TS_ORPHANED_DEP_ITEMS ODI
	WHERE 
		ODI.CONTENTTYPEID = (
			SELECT CONTENTTYPEID 
			FROM CONTENTTYPES 
			WHERE CONTENTTYPELABEL LIKE 'Navon'
		);
	-- Please save above results into a CSV file named: TS_ORPHANED_DEP_NAVONS.csv
GO
--
-- TS_ORPHANED_DEP_PUB_ITEMS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_PUB_ITEMS'))
DROP VIEW TS_ORPHANED_DEP_PUB_ITEMS
GO
CREATE VIEW TS_ORPHANED_DEP_PUB_ITEMS AS 
	-- Finds all items that are not in a folder, have AA relationship(s) to other items, and are in a publishable state.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
		CONTENTSTATUS AS CS 
		INNER JOIN
			STATES AS ST 
		ON 
			CS.CONTENTSTATEID = ST.STATEID 
			AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
	WHERE     
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE = 1
		AND CS.CONTENTID NOT IN (
			-- Finds all items that have a folder relationship
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON 
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON
					OB.OWNER_ID = CS2.CONTENTID
			WHERE
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			)
		AND CS.CONTENTID IN (
			-- Finds all items that have an AA relationship to other items
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON
					OB.OWNER_ID = CS2.CONTENTID 
					AND OB.OWNER_REVISION = CS2.PUBLIC_REVISION
			WHERE      
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 1 
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			) 
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1 
		AND ST.CONTENTVALID IN ('y', 'i');
		-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS.csv
GO

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_COM --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_PUB_ITEMS_COM'))
		DROP VIEW TS_ORPHANED_DEP_PUB_ITEMS_COM
		GO
		CREATE VIEW TS_ORPHANED_DEP_PUB_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Community
			SELECT
				COUNT(ODPI.CONTENTID) AS COUNT, 
				ODPI.COMMUNITYID, 
				COM.NAME
			FROM
				TS_ORPHANED_DEP_PUB_ITEMS AS ODPI 
				INNER JOIN
					RXCOMMUNITY AS COM 
				ON 
					ODPI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY 
				ODPI.COMMUNITYID, 
				COM.NAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_COM.csv
		GO
		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_CT --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_PUB_ITEMS_CT'))
		DROP VIEW TS_ORPHANED_DEP_PUB_ITEMS_CT
		GO
		CREATE VIEW TS_ORPHANED_DEP_PUB_ITEMS_CT AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Content Type
			SELECT
				COUNT(ODPI.CONTENTID) AS COUNT, 
				ODPI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME
			FROM
				TS_ORPHANED_DEP_PUB_ITEMS AS ODPI 
				INNER JOIN
					CONTENTTYPES AS CT 
				ON
					ODPI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY 
				ODPI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_CT.csv
		GO
		--
		-- TS_ORPHANED_DEP_PUB_ITEMS_WF --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_DEP_PUB_ITEMS_WF'))
		DROP VIEW TS_ORPHANED_DEP_PUB_ITEMS_WF
		GO
		CREATE VIEW TS_ORPHANED_DEP_PUB_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Dependent Publishable Items Grouped by Workflow
			SELECT
				COUNT(ODPI.CONTENTID) AS COUNT, 
				ODPI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME
			FROM
				TS_ORPHANED_DEP_PUB_ITEMS AS ODPI 
				INNER JOIN
					WORKFLOWAPPS AS WF 
				ON
					ODPI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY 
				ODPI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_DEP_PUB_ITEMS_WF.csv
		GO
--
-- TS_ORPHANED_FOLDERS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_FOLDERS'))
DROP VIEW TS_ORPHANED_FOLDERS
GO
CREATE VIEW TS_ORPHANED_FOLDERS AS 
	-- Finds all folders that are not in a folder.
	-- Results are filtered by community.
	SELECT CS.*
	FROM CONTENTSTATUS AS CS
	WHERE     
		-- OBJECTTYPE=2 is a folder
		OBJECTTYPE = 2 
		AND CONTENTID NOT IN (
			-- Finds all folders that have a folder relationship
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM 
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON
					OB.OWNER_ID = CS2.CONTENTID
			WHERE
				CS1.OBJECTTYPE = 2
				AND CS2.OBJECTTYPE = 2 
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			) 
		-- Exclude the '/' root folder which is always contentid=1
		AND (CONTENTID <> 1);
		-- Please save above results into a CSV file named: TS_ORPHANED_FOLDERS.csv
GO
--
-- TS_ORPHANED_ITEMS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_ITEMS'))
DROP VIEW TS_ORPHANED_ITEMS
GO
CREATE VIEW TS_ORPHANED_ITEMS AS 
	-- Finds all items that are not in a folder. 
	-- Results are filtered by community.
	SELECT CS.*
	FROM CONTENTSTATUS AS CS
	WHERE     
		-- OBJECTTYPE=1 is an item
		OBJECTTYPE = 1
		AND CONTENTID NOT IN (
			-- Finds all items that have a folder relationship
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON
					OB.OWNER_ID = CS2.CONTENTID
			WHERE
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			)
		-- Exclude the '/' root folder which is always contentid=1
		AND CONTENTID <> 1;
		-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS.csv
GO

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_ITEMS_COM --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_ITEMS_COM'))
		DROP VIEW TS_ORPHANED_ITEMS_COM
		GO
		CREATE VIEW TS_ORPHANED_ITEMS_COM AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Community
			SELECT
				COUNT(OI.CONTENTID) AS COUNT, 
				OI.COMMUNITYID, 
				COM.NAME
			FROM
				TS_ORPHANED_ITEMS AS OI 
				INNER JOIN
					RXCOMMUNITY AS COM 
				ON 
					OI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY 
				OI.COMMUNITYID, 
				COM.NAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_COM.csv
		GO
		--
		-- TS_ORPHANED_ITEMS_CT --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_ITEMS_CT'))
		DROP VIEW TS_ORPHANED_ITEMS_CT
		GO
		CREATE VIEW TS_ORPHANED_ITEMS_CT AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Content Type
			SELECT 
				COUNT(OI.CONTENTID) AS COUNT, 
				OI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME
			FROM
				TS_ORPHANED_ITEMS AS OI 
				INNER JOIN
					CONTENTTYPES AS CT 
				ON
					OI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY 
				OI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_CT.csv
		GO
		--
		-- TS_ORPHANED_ITEMS_WF --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_ITEMS_WF'))
		DROP VIEW TS_ORPHANED_ITEMS_WF
		GO
		CREATE VIEW TS_ORPHANED_ITEMS_WF AS 
			-- ORACLE 6x Count Orphaned Items Grouped by Workflow
			SELECT
				COUNT(OI.CONTENTID) AS COUNT, 
				OI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME
			FROM
				TS_ORPHANED_ITEMS AS OI 
				INNER JOIN
					WORKFLOWAPPS AS WF 
				ON 
					OI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY 
				OI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_ITEMS_WF.csv
		GO
--
-- TS_ORPHANED_NAVONS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_NAVONS'))
DROP VIEW TS_ORPHANED_NAVONS
GO
CREATE VIEW TS_ORPHANED_NAVONS AS 
	-- Finds all Navons that are not in a folder. 
	-- Results are filtered by community.
	SELECT *
	FROM TS_ORPHANED_ITEMS AS OI
	WHERE OI.CONTENTTYPEID=(SELECT CONTENTTYPEID FROM CONTENTTYPES WHERE CONTENTTYPELABEL LIKE 'Navon');
	-- Please save above results into a CSV file named: TS_ORPHANED_NAVONS.csv
GO
--
-- TS_ORPHANED_PUB_ITEMS
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_PUB_ITEMS'))
DROP VIEW TS_ORPHANED_PUB_ITEMS
GO
CREATE VIEW TS_ORPHANED_PUB_ITEMS AS 
	-- Finds all items that are not in a folder and are in a publishable state.
	-- Results are filtered by community.
	SELECT CS.*
	FROM
		CONTENTSTATUS AS CS 
		INNER JOIN
			STATES AS ST 
		ON 
			CS.CONTENTSTATEID = ST.STATEID 
			AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
	WHERE     
		-- OBJECTTYPE=1 is an item
		CS.OBJECTTYPE = 1 
		AND CS.CONTENTID NOT IN (
			-- Finds all items that have a folder relationship
			SELECT 
				DISTINCT OB.DEPENDENT_ID
			FROM
				CONTENTSTATUS AS CS1 
				INNER JOIN
					PSX_OBJECTRELATIONSHIP AS OB 
				ON
					CS1.CONTENTID = OB.DEPENDENT_ID 
				INNER JOIN
					CONTENTSTATUS AS CS2 
				ON
					OB.OWNER_ID = CS2.CONTENTID
			WHERE
				CS1.OBJECTTYPE = 1
				AND CS2.OBJECTTYPE = 2
				AND CS.WORKFLOWAPPID = CS1.WORKFLOWAPPID
			) 
		-- Exclude the '/' root folder which is always contentid=1
		AND CS.CONTENTID <> 1 
		AND ST.CONTENTVALID IN ('y', 'i');
		-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS.csv
GO

	--
	-- ### REPORTS ### --
	--

		--
		-- TS_ORPHANED_PUB_ITEMS_COM --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_PUB_ITEMS_COM'))
		DROP VIEW TS_ORPHANED_PUB_ITEMS_COM
		GO
		CREATE VIEW TS_ORPHANED_PUB_ITEMS_COM AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Community
			SELECT
				COUNT(OPI.CONTENTID) AS COUNT, 
				OPI.COMMUNITYID, 
				COM.NAME
			FROM
				TS_ORPHANED_PUB_ITEMS AS OPI 
				INNER JOIN
					RXCOMMUNITY AS COM 
				ON 
					OPI.COMMUNITYID = COM.COMMUNITYID
			GROUP BY 
				OPI.COMMUNITYID, 
				COM.NAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_COM.csv
		GO
		--
		-- TS_ORPHANED_PUB_ITEMS_CT --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_PUB_ITEMS_CT'))
		DROP VIEW TS_ORPHANED_PUB_ITEMS_CT
		GO
		CREATE VIEW TS_ORPHANED_PUB_ITEMS_CT AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Content Type
			SELECT
				COUNT(OPI.CONTENTID) AS COUNT, 
				OPI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME
			FROM
				TS_ORPHANED_PUB_ITEMS AS OPI 
				INNER JOIN
					CONTENTTYPES AS CT 
				ON 
					OPI.CONTENTTYPEID = CT.CONTENTTYPEID
			GROUP BY 
				OPI.CONTENTTYPEID, 
				CT.CONTENTTYPENAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_CT.csv
		GO
		--
		-- TS_ORPHANED_PUB_ITEMS_WF --
		--
		IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_ORPHANED_PUB_ITEMS_WF'))
		DROP VIEW TS_ORPHANED_PUB_ITEMS_WF
		GO
		CREATE VIEW TS_ORPHANED_PUB_ITEMS_WF AS
			-- ORACLE 6x Count Orphaned Publishable Items Grouped by Workflow
			SELECT
				COUNT(OPI.CONTENTID) AS COUNT, 
				OPI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME
			FROM
				TS_ORPHANED_PUB_ITEMS AS OPI 
				INNER JOIN
					WORKFLOWAPPS AS WF 
				ON
					OPI.WORKFLOWAPPID = WF.WORKFLOWAPPID
			GROUP BY 
				OPI.WORKFLOWAPPID, 
				WF.WORKFLOWAPPNAME;
			-- Please save above results into a CSV file named: TS_ORPHANED_PUB_ITEMS_WF.csv
			GO
--
-- TS_PUB_NAVONS_NO_LANDING_PAGE --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_PUB_NAVONS_NO_LANDING_PAGE'))
DROP VIEW TS_PUB_NAVONS_NO_LANDING_PAGE
GO
CREATE VIEW TS_PUB_NAVONS_NO_LANDING_PAGE AS 
	-- Finds all publishable navons without a landing page.
	-- Results are filtered by community.
	SELECT CS.*
	FROM 
		CONTENTSTATUS AS CS 
		INNER JOIN
			STATES AS ST 
		ON 
			CS.CONTENTSTATEID = ST.STATEID 
			AND CS.WORKFLOWAPPID = ST.WORKFLOWAPPID
	WHERE     
		-- PARENT ITEM IS A NAVON
		CS.CONTENTTYPEID = (
			SELECT CONTENTTYPEID
			FROM CONTENTTYPES
			WHERE CONTENTTYPELABEL = 'Navon'
		)
		-- PARENT NAVON IS PUBLISHABLE
		AND ST.CONTENTVALID IN ('y', 'i')
		AND CS.CONTENTID NOT IN (
			-- Finds all PUBLISHABLE NAVONS WITH A LANDING PAGE
			SELECT REL.OWNER_ID
			FROM
				PSX_OBJECTRELATIONSHIP AS REL 
				INNER JOIN
					CONTENTSTATUS AS CS1 
				ON 
					REL.OWNER_ID = CS1.CONTENTID 
					AND REL.OWNER_REVISION = CS1.PUBLIC_REVISION 
				INNER JOIN
					STATES AS ST1 
				ON
					CS1.CONTENTSTATEID = ST1.STATEID 
					AND CS1.WORKFLOWAPPID = ST1.WORKFLOWAPPID
			-- PARENT ITEM IS A NAVON
			WHERE      
				CS1.CONTENTTYPEID = (
					SELECT CONTENTTYPEID
					FROM CONTENTTYPES AS CONTENTTYPES_1
					WHERE CONTENTTYPELABEL = 'Navon'
				) 
				-- NAVON HAS NAV LANDING PAGE ITEM
				AND REL.SLOT_ID = (
					SELECT SLOTID
					FROM RXSLOTTYPE 
					WHERE SLOTNAME = 'rffNavLandingPage'
				)
				-- PARENT NAVON IS PUBLISHABLE
				AND ST1.CONTENTVALID IN ('y', 'i')
			);
GO
--
-- TS_RXPUBDOCS_NO_FILENAME --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_RXPUBDOCS_NO_FILENAME'))
DROP VIEW TS_RXPUBDOCS_NO_FILENAME
GO
CREATE VIEW TS_RXPUBDOCS_NO_FILENAME AS
	SELECT
		PD.PUBSTATUSID, 
		PD.CONTENTID, 
		PD.VARIANTID, 
		PD.LOCATIONHASH, 
		PD.PUBSTATUS, 
		PD.PUBDATE, 
		PD.PUBOP, 
		PD.PUBLOCATION,
		PD.CONTENTURL, 
		PD.VERSIONID, 
		PD.REVISIONID, 
		PD.ELAPSETIME, 
		CS.CONTENTTYPEID, 
		CS.COMMUNITYID
	FROM
		RXPUBDOCS AS PD 
		INNER JOIN
			CONTENTSTATUS AS CS 
		ON 
			PD.CONTENTID = CS.CONTENTID
	WHERE     
		-- Finds all published content items that end in a '/' 
		-- (e.g. don't have a filename or file extension) for their publocation.
		-- Results are filtered by community.
		SUBSTRING(PD.PUBLOCATION, - 1, 1) = '/';
GO
--
-- TS_RXPUBDOCS_NO_FILENAME_ORPH --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_RXPUBDOCS_NO_FILENAME_ORPH'))
DROP VIEW TS_RXPUBDOCS_NO_FILENAME_ORPH
GO
CREATE VIEW TS_RXPUBDOCS_NO_FILENAME_ORPH AS
	SELECT
		PD.PUBSTATUSID, 
		PD.CONTENTID, 
		PD.VARIANTID, 
		PD.LOCATIONHASH, 
		PD.PUBSTATUS, 
		PD.PUBDATE, 
		PD.PUBOP, 
		PD.PUBLOCATION,
		PD.CONTENTURL,
		PD.VERSIONID, 
		PD.REVISIONID, 
		PD.ELAPSETIME, 
		CS.CONTENTTYPEID, 
		CS.COMMUNITYID
	FROM
		RXPUBDOCS AS PD 
		INNER JOIN
			CONTENTSTATUS AS CS 
		ON
			PD.CONTENTID = CS.CONTENTID
	WHERE     
		-- Finds all published content items that end in a '/' 
		-- (e.g. don't have a filename or file extension) for their publocation
		SUBSTRING(PD.PUBLOCATION, - 1, 1) = '/'
		-- and are also in the TS_ORPHANED_ITEMS view result set.
		-- Results are filtered by community.
		AND PD.CONTENTID IN (
			SELECT CONTENTID
			FROM TS_ORPHANED_ITEMS
		);
GO
--
-- TS_SHAREDBINARY_NO_FILENAME --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_SHAREDBINARY_NO_FILENAME'))
DROP VIEW TS_SHAREDBINARY_NO_FILENAME
GO
CREATE VIEW TS_SHAREDBINARY_NO_FILENAME AS
	-- Finds all items in the RXS_CT_SHAREDBINARY table, 
	-- that have a null ITEM_FILENAME, 
	-- but ITEM is not null for the item's current public revision.
	-- Results are filtered by community.
	SELECT CS.*
	FROM
		CONTENTSTATUS AS CS 
		INNER JOIN
			RXS_CT_SHAREDBINARY AS SB 
		ON
			CS.CONTENTID = SB.CONTENTID 
			AND CS.PUBLIC_REVISION = SB.REVISIONID
	WHERE
		SB.ITEM_FILENAME IS NULL
		AND SB.ITEM IS NOT NULL;
GO
--
-- TS_SHAREDIMAGE_NO_FILENAME --
--
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID('TS_SHAREDIMAGE_NO_FILENAME'))
DROP VIEW TS_SHAREDIMAGE_NO_FILENAME
GO
CREATE VIEW TS_SHAREDIMAGE_NO_FILENAME AS
	-- Finds all items in the RXS_CT_SHAREDIMAGE table, 
	-- that have a null IMG1_FILENAME, 
	-- but IMG1 is not null for the item's current public revision.
	-- Results are filtered by community.
	SELECT CS.*
	FROM
		CONTENTSTATUS AS CS 
		INNER JOIN
			RXS_CT_SHAREDIMAGE AS SI 
		ON
			CS.CONTENTID = SI.CONTENTID 
			AND CS.PUBLIC_REVISION = SI.REVISIONID
	WHERE
		SI.IMG1_FILENAME IS NULL
		AND SI.IMG1 IS NOT NULL;
GO
